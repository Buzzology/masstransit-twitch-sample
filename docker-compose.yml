version: '3.4'

services:  

  rabbitmq:
    hostname: rabbitmq
    image: masstransit/rabbitmq:latest
    ports:
     - "5672:5672"
     - "15672:15672"
     - "15692:15692"
    healthcheck:
        timeout: 5s
        interval: 5s
        retries: 10
        test:
          - "CMD"
          - "rabbitmqctl"
          - "status" 

  mongo:
    hostname: mongo
    image: mongo
    ports:
     - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

  sqlserver:
    image: masstransit/sqlserver-quartz
    ports:
      - 1433:1433

  quartz:
    image: masstransit/quartz:latest
    environment:
      ApplicationInsights__InstrumentationKey: 'YOUR_KEY_HERE'
      MT_Prometheus: 'quartz'
      MT_Scheduler: 'quartz'
      MT_Quartz__ConnectionString: 'Server=tcp:sqlserver;Database=quartznet;Persist Security Info=False;User ID=sa;Password=Quartz!DockerP4ss;Encrypt=False;TrustServerCertificate=True;'
    ports:
     - "5002:80"

  warehouse:
    image: twitch/warehouse:latest
    environment:
      ApplicationInsights__InstrumentationKey: 'YOUR_KEY_HERE'
      MT_Prometheus: 'warehouse'
      MT_Quartz: 'quartz'
    ports:
     - "5004:80"
    depends_on:
     - rabbitmq
     - quartz

  sample:
    image: twitch/sample:latest
    environment:
      ApplicationInsights__InstrumentationKey: 'YOUR_KEY_HERE'
      #MT_Prometheus: 'sample'
      MT_Quartz: 'quartz'
    ports:
     - "5006:80"
    depends_on:
    - rabbitmq
    - quartz

  #sample.service:
      # image: ${DOCKER_REGISTRY-}sampleservice
      # build:
      #   context: .
      #   dockerfile: Sample.Service/Dockerfile

    
  #redis:
  #  image: redis
  #  container_name: cache
  #  ports:
  #    - "6379:6379"